head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2006.03.17.20.30.49;	author devel-it;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@<?php
################################################################################
# Função:
#    Configurações utilizadas pela aplicação - Validação de Formulários



# Função para validação de dados de formulários
function validaForm($matriz, $sub) {

	global $configDominio; 
	
	# Validação de documentos
	if($sub=='documentos') {
		# Verificar se é pessoa física ou jurídica
		if($matriz[tipoPessoa]=='F') {
		
			### VALIDAÇÃO DE PESSOA FÍSICA
			# validar CPF
			return(validaCPF($matriz[cpf]));
		}
		elseif($matriz[tipo_pessoa]=='J') {
			# Validar CNPJ
		}
	} # fecha validação de documentos
	
	
	# Validação de Endereço
	if($sub=='endereco') {
		# Veriricar parametros
		if(!$matriz[endereco] || !$matriz[bairro] || !$matriz[cidade] || !$matriz[uf] || !$matriz[cep] 
			|| !validaCEP($matriz[cep])) return(1);
		else return(0);
	}

	# Validação de Endereço de cobrança
	if($sub=='endereco_cob') {
		# Veriricar parametros
		if(!$matriz[endereco_cob] || !$matriz[bairro_cob] || !$matriz[cidade_cob] || !$matriz[uf_cob] || !$matriz[cep_cob] 
			|| !validaCEP($matriz[cep_cob])) return(1);
		else return(0);
	}


	# Validação de Informaçoes para Contato
	if($sub=='contato') {
		# Veriricar parametros
		if(!$matriz[contato] || !$matriz[ddd] || !$matriz[fone]
			|| !validaDDD($matriz[ddd]) || !validaFONE($matriz[fone])) return(1);
		else return(0);
	}
	
	# Validação de Informaçoes para Contato
	if($sub=='como_conheceu') {
		# Veriricar parametros
		if($matriz[como_conheceu]=='outros' && !$matriz[como_conheceu_txt]) return(1);
		else return(0);
	}


	# Validação de Informaçoes para Contato
	if($sub=='verifica_conta') {
		# Veriricar parametros
		if(!$matriz[conta] || !$matriz[senha] || !$matriz[confirma_senha]
			|| !comparaSenha($matriz[senha], $matriz[confirma_senha])) return(1);
		elseif(!mailValidaConta($matriz[conta])
			|| mailBuscaConta(mailValidaConta($matriz[conta]), $configDominio) 
			|| radiusBuscaConta(mailValidaConta($matriz[conta]))) return(1);
		else return(0);
	}


} # fecha funcao de validação de formulário



# Validação de CEP
function validaCEP($cep) {

	$cep=cpfVerificaFormato($cep);
	
	if(!is_numeric($cep) || strlen($cep)!=8) return(0);
	else return(1);
	
} #fecha validação de CEP



# Validação de DDD
function validaDDD($ddd) {

	$cep=cpfVerificaFormato($ddd);
	
	if(!is_numeric($ddd) || strlen($ddd)!=2) return(0);
	else return(1);
	
} #fecha validação de DDD




# Validação de FONE
function validaFONE($fone) {

	$fone=cpfVerificaFormato($fone);	
	
	if(!is_numeric($fone) || strlen($fone)<6) return(0);
	else return(1);
	
} #fecha validação de FONE



# Verificação de senha
function comparaSenha($senha, $confirmacao) {
	if(!$senha || !$confirmacao || ($senha != $confirmacao) ) return(0);
	else return(1);
}


# Função para conversão de valores de formulário
function formatarString($texto, $tipo){

	# Converter acentuação para maiúscula
	$matMinuscula=array('ç'
	,'â','ã','à','á','ä'
	,'é','è','ê','ë'
	,'í','ì','î','ï'
	,'ó','ò','ô','õ','ö'
	,'ú','ù','û','ü');
	
	$matMaiuscula=array('Ç'
	,'Â','Ã','Á','À','Ä'
	,'É','È','Ê','Ë'
	,'Í','Ì','Î','Ï'
	,'Ó','Ò','Õ','Ô','Ö'
	,'Ú','Ù','Û','Ü');


	if($tipo=='minuscula') {
		# Converter para maiúscula
		$texto=strtolower($texto);
		for($i=0;$i<count($matMinuscula);$i++) {
			$texto=str_replace($matMinuscula[$i], $matMaiuscula[$i], $texto);
		}
	} 
	elseif($tipo=='maiuscula') {
		# Converter para maiúscula
		$texto=strtoupper($texto);
		for($i=0;$i<count($matMinuscula);$i++) {
			$texto=str_replace($matMinuscula[$i], $matMaiuscula[$i], $texto);
		}
	}
	
	return($texto);
}



/**
 * @@return unknown
 * @@param String $valor
 * @@desc Formatar valores para padrão americano
 Exemplo: 1,000.00
*/
function formatarValores($valor) {
	# Converter valores antes de gravar
	$valor=str_replace('.','',$valor);
	
	if(strstr($valor,',')) $valor=str_replace(',','.',$valor);
	else {
		$valor=str_replace(',','',$valor);
		$valor=$valor/100;
	}
	
	return($valor);
}


function formatarValoresArquivoRemessa($valor) {
	# Converter valores antes de gravar
	$valor=str_replace('.','',$valor);
	$valor=str_replace(',','',$valor);
	
	return($valor);
}


function formatarValoresArquivoRetorno($valor) {


	$valor=($valor/100);

	return(formatarValoresForm($valor));
}



/**
 * @@return unknown
 * @@param unknown $data
 * @@desc Remover formatos de data e separadores, retornando apenas numeros da data
*/
function formatarData($data) {
	# Converter valores antes de gravar
	$data=str_replace('/','',$data);
	$data=str_replace('-','',$data);
	
	return($data);
}

/**
 * @@return unknown
 * @@param unknown $valor
 * @@desc Formatar valores para moeda (Brasil
 Exemplo: 1.000,00
*/
function formatarValoresForm($valor) {
	# Converter valores antes de gravar
	
	return(number_format($valor,2,',','.'));
}

# Função para formatação de telefone
function formatarBytes($bytes) {

	
	return(number_format(($bytes/1024),2,',','.'));
}


# Função para remover formatos de telefone
/**
 * @@return unknown
 * @@param unknown $fone
 * @@desc Remover formatação de telefone retornando apenas os numeros
*/
function formatarFoneNumeros($fone) {

	$fone=str_replace(".","",$fone);
	$fone=str_replace(",","",$fone);
	$fone=str_replace("/","",$fone);
	$fone=str_replace("\\","",$fone);
	$fone=str_replace("=","",$fone);
	$fone=str_replace("-","",$fone);
	$fone=str_replace("(","",$fone);
	$fone=str_replace(")","",$fone);
	$fone=str_replace("*","",$fone);
	$fone=str_replace("+","",$fone);
	$fone=str_replace(" ","",$fone);

	if(is_numeric($fone)) return($fone);
	else return("");
}


# Função para formatação de telefone
/**
 * @@return unknown
 * @@param unknown $fone
 * @@desc Formatar Numero de Telefone para (99) 9999-9999 ou (99) 999-9999
*/
function formatarFone($fone) {

	# formatar telefone, verificar o tamanho do numero
	$fone=formatarFoneNumeros($fone);
	
	if(strlen($fone) <= 8) {
		# Numero sem DDD
		$retorno=substr($fone, 0, strlen($fone)%4);
		$retorno.="-".substr($fone, strlen($fone)-4, 4);
	}
	else {
		# Numero com DDD
		
		# Verificar o DDD
		$retorno=substr($fone, 0, strlen($fone)-4);
		
		if((strlen($retorno)-2)%4 == 0) {
			# DDD + 4 digitos
			$ddd="(".substr($retorno, 0, 2).")&nbsp;";
			$prefixo=substr($retorno, 2, 4);
		}
		elseif((strlen($retorno)-2)%4 != 0) {
			# DDD + 3 digitos
			$ddd="(".substr($retorno, 0, 2).")&nbsp;";
			$prefixo=substr($retorno, 2, 3);
		}
		
		# Verificar o numero do fone
		$retorno=$ddd.$prefixo;
		$retorno.="-".substr($fone, strlen($fone)-4, 4);
	}
	
	return($retorno);
}



# Validação de email com checagem de dominio
/**
 * Checagem de Email buscando o MX do dominio.
 * <b>$email</b> Endereço de Email 
 * <b>$acao</b> check = checar apenas, format=formtar emails validos
 * RETORNO == NULL (email válido) 
 * REORNO != NULL (email inválido)
 * @@return unknown
 * @@param $email 
 * @@param $acao
*/
function checkMailDominio($email, $acao) {
	
	if($acao=='format') {
		$retorno=validaEmail($email);
	}
	else {
		
		$mx = array();
		
		if(strstr($email, ";") || strstr($email, "/") ) $retorno="Email inválido";
		elseif(!strstr($email, '@@') || !strstr($email, '.')) $retorno="Email inválido";
		elseif(!ctype_alpha( substr($email, -1)) ) $retorno="Email inválido";
		else {
			
			# Quebrar email em caso de utilizar "," para separação
			$matLista=explode(",",$email);
			
			if(is_array($matLista)) {
				for($a=0;$a<count($matLista);$a++) {
					$email=$matLista[$a];

					$retorno=checkMXMail($email);
				}
			}
			else {
				$retorno=checkMXMail($email);
			}
		}
	}
	
	return $retorno;
}



# Função para checagem de MX do dominoi
function checkMXMail($email) {
	
	$matEmail=explode("@@",$email);
	$dominio=$matEmail[1];
	
	if(!getmxrr($dominio, $mx)) {
		$retorno="Email inválido";
	}
	else {
		$retorno='';
	}
	
	return($retorno);

}

/**
 * @@return unknown
 * @@param unknown $email
 * @@desc Validação de email (ou lista de emails separado por ",")
   RETORNO = emails verificados e formatados
*/
function validaEmail($email) {
	
	if( strstr($email, ";") || !strstr($email, '@@') || !strstr($email, '.') ) $email='';
	else {
		# emails separados por virgula	
		$matEmail=explode(",", $email);
		
		if(is_array($matEmail)) {
			# Validar emails
			$email="";
			for($a=0;$a<count($matEmail);$a++) {
				
				$tmpMail=trim($matEmail[$a]);
				if( ctype_alpha( substr($tmpMail, -1) ) ) {
					if(strlen($email)>0) $email.=" , ";
					$email.=$tmpMail;
				}
			}
		}
		else {
			$tmpMail=trim($email);
			if( ctype_alpha( substr($tmpMail, -1) ) ) $email.=$tmpMail;
		}
	}
		
	return($email);
}


?>
@
